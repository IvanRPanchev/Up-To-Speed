// MainActivity.java
package com.example.electr0.firststeps;


import android.app.Fragment;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.speech.RecognizerIntent;
import android.speech.tts.TextToSpeech;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.app.ListFragment;
import android.support.v4.widget.SimpleCursorAdapter;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.telephony.TelephonyManager;
import android.telephony.gsm.GsmCellLocation;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import com.google.android.gms.appindexing.Action;
import com.google.android.gms.appindexing.AppIndex;
import com.google.android.gms.common.api.GoogleApiClient;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;

public class MainActivity extends AppCompatActivity implements TextToSpeech.OnInitListener {

    //from old project
    Context context;
    private ImageButton btnSpeak;
    private Button toSpeechBtn;


    String quitCase = "exit";


    //to new project
    private int port = 5503;
    private final int REQ_CODE_SPEECH_INPUT = 100;
    private TextView gsmInfoView;
    private EditText userInput;
    private Button sendToServer;
    private Button showBtn;
    private Button talkBtn;

    private TextToSpeech tts;
    String speakingWords = "Hello sir";
    String phoneNum = "";
    String[] jokes = new String[9];
    String voiceText = "temp";


    public static String[] responseNums = new String[10];


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        gsmInfoView = (TextView) findViewById(R.id.serverInfo);
        userInput = (EditText) findViewById(R.id.etMsg);
        sendToServer = (Button) findViewById(R.id.bSend);
        showBtn = (Button) findViewById(R.id.bShow);
        talkBtn = (Button) findViewById(R.id.bTalk);
        tts = new TextToSpeech(this, this);

        jokes[0] = "Boy: *calls 911* Hello? I need your help!\n" +
                "                911: Alright, What is it?\n" +
                "        Boy: Two girls are fighting over me!\n" +
                "                911: So what's your emergency?\n" +
                "        Boy: The ugly one is winning.";




        TelephonyManager telephonyManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
        final GsmCellLocation cellLocation = (GsmCellLocation) telephonyManager.getCellLocation();

        final int cellid = cellLocation.getCid();
        //int lac = cellLocation.getLac();


        sendToServer.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {

                phoneNum = String.valueOf(userInput.getText());
                Clients myClient = new Clients("192.168.0.102", port, gsmInfoView, String.valueOf(cellid), phoneNum);
                myClient.execute();

            }
        });

        showBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {

                FragmentManager fragmentManager = getSupportFragmentManager();
                FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();

                ContactsFragment fragment = new ContactsFragment();
                fragmentTransaction.add(R.id.fragment_container, fragment);
                fragmentTransaction.commit();



            }
        });

        talkBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {

                promptSpeechInput();

            }
        });



    }



    //CONNECTION TO SERVER

    public class Clients extends AsyncTask<Void, Void, Void> {

        String dstAddress;
        int dstPort;
        String response = "";
        String endCheck = "";
        TextView serverInfoView = null;
        String cellTowerID;
        String clientNum;



        Clients(String addr, int port, TextView serverInfoView, String cellTowerID, String clientNum) {
            dstAddress = addr;
            dstPort = port;
            this.serverInfoView = serverInfoView;
            this.cellTowerID = cellTowerID;
            this.clientNum = clientNum;
        }


        @Override
        protected Void doInBackground(Void... arg0) {

            Socket connection = null;
            Scanner socketIn = null;
            PrintWriter socketOut = null;


            try {

                connection = new Socket(dstAddress, dstPort);
                socketIn = new Scanner(new BufferedReader(new InputStreamReader(connection.getInputStream())));
                socketOut = new PrintWriter(connection.getOutputStream(), true);

                socketOut.println(clientNum);       //Send phone number
                socketOut.flush();

                socketOut.println(cellTowerID);    // send tower id
                socketOut.flush();

                int i =0;
                while (true) {

                    endCheck = socketIn.nextLine();

                    if (endCheck.equals("end")) {
                        break;
                    }


                    if(!(endCheck.equals("There is nobody around you") || endCheck.equals("Friends list around you: "))){

                        responseNums[i] = endCheck;
                        i++;

                    }

                    response += "\n" + endCheck;

                }


            } catch (UnknownHostException e) {

                e.printStackTrace();
                response = "UnknownHostException: " + e.toString();
            } catch (IOException e) {

                e.printStackTrace();
                response = "IOException: " + e.toString();
            } finally {
                if (connection != null) {
                    try {
                        connection.close();
                    } catch (IOException e) {

                        e.printStackTrace();
                    }
                }
            }
            return null;
        }

        @Override
        protected void onPostExecute(Void result) {


            serverInfoView.setText(response);


            super.onPostExecute(result);

        }

    }



    //TEXT TO SPEECH

    private void speakOut() {

        this.tts.speak(speakingWords, 0, null);

    }

    @Override
    public void onInit(int status) {

        if (status == TextToSpeech.SUCCESS) {

            int result = tts.setLanguage(Locale.US);

            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {

                Log.e("TTS", "This Language is not supported");

            } else {

                speakOut();

            }

        } else {
            Log.e("TTS", "Initilization Failed!");
        }

    }


    public void onDestroy() {
        if (this.tts != null) {
            this.tts.stop();
            this.tts.shutdown();
        }
        super.onDestroy();
    }



//     SPEECH TO TEXT

    private void promptSpeechInput(){

        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());
        intent.putExtra(RecognizerIntent.EXTRA_PROMPT, getString(R.string.speech_prompt));

        try{
            startActivityForResult(intent,REQ_CODE_SPEECH_INPUT);
        }catch(ActivityNotFoundException a){
            Toast.makeText(getApplicationContext(),getString(R.string.speech_not_supported),
                    Toast.LENGTH_SHORT).show();
        }

    }


    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        super.onActivityResult(requestCode, resultCode, data);

        switch (requestCode) {
            case REQ_CODE_SPEECH_INPUT: {
                if (resultCode == RESULT_OK && null != data) {

                    ArrayList<String> result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);

                    voiceText = (result.get(0));
                    if(voiceText.equalsIgnoreCase("give me a joke")){

                        speakingWords = jokes[0];

                        speakOut();

                    }else{

                        speakingWords = voiceText;

                        speakOut();

                    }


                }
                break;
            }

        }

    }


}




//MAIN XML CODE 

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context="com.example.electr0.firststeps.MainActivity">


    <TextView
        android:id="@+id/gsmInfo"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Enter number:" />

    <EditText
        android:id="@+id/etMsg"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/gsmInfo"
        android:ems="10">
        <requestFocus />
    </EditText>

    <Button
        android:id="@+id/bSend"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@id/etMsg"
        android:layout_alignParentRight="true"
        android:text="Send" />

    <Button
        android:id="@+id/bShow"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@id/etMsg"
        android:layout_toLeftOf="@id/bSend"
        android:text="Show" />

    <Button
        android:id="@+id/bTalk"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@id/etMsg"
        android:layout_toLeftOf="@id/bShow"
        android:text="Talk" />

    <TextView
        android:layout_marginTop="16dp"
        android:id="@+id/status"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@id/bSend"
        android:text="Status:" />



    <TextView
        android:layout_below="@id/status"
        android:layout_marginTop="16dp"
        android:id="@+id/serverInfo"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="no server info " />


    <LinearLayout

        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_below="@id/serverInfo"
        android:layout_marginTop="16dp"
        android:id="@+id/fragment_container"

        ></LinearLayout>



</RelativeLayout>




//MAINFEST CODE 
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.electr0.firststeps">
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.READ_CONTACTS" />
    <uses-permission android:name="android.permission.CALL_PHONE" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <action android:name="android.intent.action.PHONE_STATE" />
                <action android:name="org.example.MY_ACTION_INTENT"/>
                <action android:name="android.media.action.IMAGE_CAPTURE"/>

                <category android:name="android.intent.category.DEFAULT"/>
                <category android:name="android.intent.category.VOICE"/>
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
            <intent-filter>
                <action android:name="android.media.action.STILL_IMAGE_CAMERA"/>
                <category android:name="android.intent.category.DEFAULT"/>
                <category android:name="android.intent.category.VOICE"/>
            </intent-filter>
        </activity>
        <!-- ATTENTION: This was auto-generated to add Google Play services to your project for
             App Indexing.  See https://g.co/AppIndexing/AndroidStudio for more information. -->
        <meta-data
            android:name="com.google.android.gms.version"
            android:value="@integer/google_play_services_version" />
    </application>

</manifest>



//ContactsFragment.java

package com.example.electr0.firststeps;

import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.provider.ContactsContract.Contacts;
import android.provider.Settings;
import android.support.v4.app.ListFragment;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;
import android.support.v4.widget.CursorAdapter;
import android.support.v4.widget.SimpleCursorAdapter;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.Toast;


public class ContactsFragment extends ListFragment implements LoaderCallbacks<Cursor> {

    private CursorAdapter mAdapter;

    String mSearchString = MainActivity.responseNums[0];



    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // create adapter once
        Context context = getActivity();
        int layout = android.R.layout.simple_list_item_1;
        Cursor c = null; // there is no cursor yet

        int flags = 0; // no auto-requery! Loader requeries.

        mAdapter = new SimpleCursorAdapter(context, layout, c, FROM, TO, flags);

    }


    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);

        // each time we are started use our listadapter
        setListAdapter(mAdapter);

        // and tell loader manager to start loading
        getLoaderManager().initLoader(0, null, this);


    }


    // columns requested from the database
    private static final String[] PROJECTION = {
            Contacts._ID, // _ID is always required
            Contacts.DISPLAY_NAME_PRIMARY // that's what we want to display
    };


    // and name should be displayed in the text1 textview in item layout
    private static final String[] FROM = { Contacts.DISPLAY_NAME_PRIMARY };
    private static final int[] TO = { android.R.id.text1 };


    @Override
    public Loader<Cursor> onCreateLoader(int loaderId, Bundle args) {

        Uri contentUri = Uri.withAppendedPath(
                Contacts.CONTENT_FILTER_URI,
                Uri.encode(mSearchString));

        return new CursorLoader(
                getActivity(),
                contentUri,
                PROJECTION,
                null,
                null,
                null
        );
    }


    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        // Once cursor is loaded, give it to adapter
        mAdapter.swapCursor(data);
    }

    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
        // on reset take any old cursor away
        mAdapter.swapCursor(null);
    }


    @Override
    public void onListItemClick(ListView l, View v, int pos, long id) {
        super.onListItemClick(l, v, pos, id);

        Intent intent = new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + mSearchString));

        startActivity(intent);



    }
}





